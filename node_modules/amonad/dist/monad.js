"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const thenable_1 = require("./thenable");
const bindErrorMsg = "Maybe.bind() is should be full filled by monad decorator.";
function fulfilled(isMonad) {
    return function (target, propertyKey, descriptor) {
        descriptor.value = function (onfulfilled, onrejected) {
            if (onfulfilled) {
                const value = onfulfilled(this.v);
                return isMonad(value) ? value : new target.constructor(value);
            }
            else
                return this;
        };
    };
}
exports.fulfilled = fulfilled;
function rejected(isMonad) {
    return function (target, propertyKey, descriptor) {
        descriptor.value = function (onfulfilled, onrejected) {
            if (onrejected) {
                const value = onrejected(this.v);
                return isMonad(value) ? value : new target.constructor(value);
            }
            else
                return this;
        };
    };
}
exports.rejected = rejected;
class CJustSuccess {
    constructor(v) {
        this.v = v;
    }
    then(onfulfilled, onrejected) {
        throw new Error(bindErrorMsg);
    }
    get() {
        return this.v;
    }
    getOrElse(value) {
        return this.v;
    }
    getOrThrow() {
        return this.v;
    }
}
tslib_1.__decorate([
    fulfilled(thenable_1.isThenable),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Object)
], CJustSuccess.prototype, "then", null);
exports.CJustSuccess = CJustSuccess;
class CNoneFailure {
    constructor(v) {
        this.v = v;
    }
    then(onfulfilled, onrejected) {
        throw new Error(bindErrorMsg);
    }
    getOrElse(value) {
        return value;
    }
    get() {
        return this.v;
    }
    getOrThrow() {
        throw this.v;
    }
}
tslib_1.__decorate([
    rejected(thenable_1.isThenable),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Object)
], CNoneFailure.prototype, "then", null);
exports.CNoneFailure = CNoneFailure;
//# sourceMappingURL=monad.js.map